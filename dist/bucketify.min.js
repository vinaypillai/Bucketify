const Bucketify=function(){function t(t,e){if(e<=0)throw RangeError("size must be greater than zero");this.min=t,this.max=t+e,this.vals=[]}function e({list:e,getProperty:n,minRange:s,maxRange:i,maxBuckets:r,bucketSize:u}){if(!Array.isArray(e)||null!=n&&"function"!=typeof n||null!=s&&"number"!=typeof s||null!=i&&"number"!=typeof i||null!=r&&(null!=u||"number"!=typeof r||r<=0)||null!=u&&(null!=r||"number"!=typeof u||u<=0))throw TypeError("Illegal arguments");const h=null!=s;s=h?s:Number.MAX_SAFE_INTEGER;const l=null!=i;if(i=l?i:Number.MIN_SAFE_INTEGER,h&&l&&i<s)throw RangeError("maxRange must be greater than or equal to minRange");this.getProperty=null!=n?n:t=>t,e.forEach(t=>{const e=this.getProperty(t);h||(s=Math.min(s,e)),l||(i=Math.max(i,e))}),this.min=s,this.max=i;const a=this.max-this.min+1,o=null!=r?Math.min(a,r):a,m=Math.ceil(a/o),c=null!=u?u:m;this.buckets=[];for(let e=this.min;e<=this.max;e+=c)this.buckets.push(new t(e,c));e.forEach(t=>{this.add(t)})}return e.prototype.add=function(t){const e=this.getProperty(t);let n=0,s=this.buckets.length-1,i=!1;for(;!i;){let r=Math.floor((n+s)/2);this.buckets[r].min<=e&&this.buckets[r].max>e?(this.buckets[r].vals.push(t),i=!0):this.buckets[r].min>e?s-n<=2?(this.buckets[r-1].vals.push(t),i=!0):s=r:s-n<=2?(this.buckets[r+1].vals.push(t),i=!0):n=r}},e}();