function Bucket(t,e){if(e<=0)throw RangeError("size must be greater than zero");this.min=t,this.max=t+e,this.vals=[]}function Bucketify({list:t,getProperty:e,minRange:s,maxRange:n,maxBuckets:i,bucketSize:u}){if(!Array.isArray(t)||null!=e&&"function"!=typeof e||null!=s&&"number"!=typeof s||null!=n&&"number"!=typeof n||null!=i&&(null!=u||"number"!=typeof i||i<=0)||null!=u&&(null!=i||"number"!=typeof u||u<=0))throw TypeError("Illegal arguments");const r=null!=s;s=r?s:Number.MAX_SAFE_INTEGER;const l=null!=n;if(n=l?n:Number.MIN_SAFE_INTEGER,r&&l&&n<s)throw RangeError("maxRange must be greater than or equal to minRange");this.getProperty=null!=e?e:t=>t,t.forEach(t=>{const e=this.getProperty(t);r||(s=Math.min(s,e)),l||(n=Math.max(n,e))}),this.min=s,this.max=n;const h=this.max-this.min+1,a=null!=i?Math.min(h,i):h,o=Math.ceil(h/a),m=null!=u?u:o;this.buckets=[];for(let t=this.min;t<=this.max;t+=m)this.buckets.push(new Bucket(t,m));t.forEach(t=>{this.add(t)})}Bucketify.prototype.add=function(t){const e=this.getProperty(t);let s=0,n=this.buckets.length-1,i=!1;for(;!i;){let u=Math.floor((s+n)/2);this.buckets[u].min<=e&&this.buckets[u].max>e?(this.buckets[u].vals.push(t),i=!0):this.buckets[u].min>e?n-s<=2?(this.buckets[u-1].vals.push(t),i=!0):n=u:n-s<=2?(this.buckets[u+1].vals.push(t),i=!0):s=u}},module.exports=Bucketify;