const assert = require("chai").assert;
const Bucketify = require("../index.min.js");

describe("Bucketify",function(){
    describe("#constructor",function(){
        context("list:[1,2,3,4,5,6]",function(){
            it("Should group array of 6 sequential elements into 6 buckets",function(){
                assert.deepOwnInclude(new Bucketify({"list":[1,2,3,4,5,6]}),{
                "min":1,
                "max":6,
                "buckets":[{
                    "min":1,
                    "max":2,
                    "vals":[1]
                },
                {
                    "min":2,
                    "max":3,
                    "vals":[2]
                },
                {
                    "min":3,
                    "max":4,
                    "vals":[3]
                },
                {
                    "min":4,
                    "max":5,
                    "vals":[4]
                },
                {
                    "min":5,
                    "max":6,
                    "vals":[5]
                },
                {
                    "min":6,
                    "max":7,
                    "vals":[6]
                }]});
            });
        })
        context("list:[1,2,3,4,5,6],maxBuckets:3",function(){    
            it("Should group array of 6 sequential elements into 3 buckets",function(){
                assert.deepOwnInclude(new Bucketify({"list":[1,2,3,4,5,6],"maxBuckets":3}),{
                "min":1,
                "max":6,
                "buckets":[{
                    "min":1,
                    "max":3,
                    "vals":[1,2]
                },
                {
                    "min":3,
                    "max":5,
                    "vals":[3,4]
                },
                {
                    "min":5,
                    "max":7,
                    "vals":[5,6]
                }]});
            });
        });
        context("list:[1,2,5,5,6],maxBuckets:3",function(){    
            it("Should group array of 5 non-sequential elements into 3 buckets",function(){
                assert.deepOwnInclude(new Bucketify({"list":[1,2,5,5,6],"maxBuckets":3}),{
                "min":1,
                "max":6,
                "buckets":[{
                    "min":1,
                    "max":3,
                    "vals":[1,2]
                },
                {
                    "min":3,
                    "max":5,
                    "vals":[]
                },
                {
                    "min":5,
                    "max":7,
                    "vals":[5,5,6]
                }]});
            });
        })
        context(`list:[{"i":1},{"i":2},{"i":5},{"i":5},{"i":6}],maxBuckets:3`,function(){    
            it("Should group array of 5 objects into 3 buckets",function(){
                assert.deepOwnInclude(new Bucketify({"list":[{"i":1},{"i":2},{"i":5},{"i":5},{"i":6}],"maxBuckets":3,
                "getProperty":(a)=>a.i}),{
                "min":1,
                "max":6,
                "buckets":[{
                    "min":1,
                    "max":3,
                    "vals":[{"i":1},{"i":2}]
                },
                {
                    "min":3,
                    "max":5,
                    "vals":[]
                },
                {
                    "min":5,
                    "max":7,
                    "vals":[{"i":5},{"i":5},{"i":6}]
                }]});
            });
        })
        context("list:[1,2,3,4,5,6],minRange:0",function(){
            it("Should group array of 6 sequential elements into 6 buckets with minRange",function(){
                assert.deepOwnInclude(new Bucketify({"list":[1,2,3,4,5,6],"minRange":0}),{
                "min":0,
                "max":6,
                "buckets":[{
                    "min":0,
                    "max":1,
                    "vals":[]
                },{
                    "min":1,
                    "max":2,
                    "vals":[1]
                },
                {
                    "min":2,
                    "max":3,
                    "vals":[2]
                },
                {
                    "min":3,
                    "max":4,
                    "vals":[3]
                },
                {
                    "min":4,
                    "max":5,
                    "vals":[4]
                },
                {
                    "min":5,
                    "max":6,
                    "vals":[5]
                },
                {
                    "min":6,
                    "max":7,
                    "vals":[6]
                }]});
            });
        })
        context("list:[1,2,5,5,6], minRange:0, maxBuckets:3",function(){   
            it("Should group array of 5 non-sequential elements into 3 buckets with min range",function(){
                assert.deepOwnInclude(new Bucketify({"list":[1,2,5,5,6],"minRange":0,"maxBuckets":3}),{
                "min":0,
                "max":6,
                "buckets":[{
                    "min":0,
                    "max":3,
                    "vals":[1,2]
                },
                {
                    "min":3,
                    "max":6,
                    "vals":[5,5]
                },
                {
                    "min":6,
                    "max":9,
                    "vals":[6]
                }]});
            });
        });
        context("list:[1,2,3,4,5,6],minRange:0,maxRange:10",function(){
            it("Should group array of 6 sequential elements into 6 buckets with maxRange",function(){
                assert.deepOwnInclude(new Bucketify({"list":[1,2,3,4,5,6],"minRange":0,"maxRange":10}),{
                "min":0,
                "max":10,
                "buckets":[{
                    "min":0,
                    "max":1,
                    "vals":[]
                },{
                    "min":1,
                    "max":2,
                    "vals":[1]
                },
                {
                    "min":2,
                    "max":3,
                    "vals":[2]
                },
                {
                    "min":3,
                    "max":4,
                    "vals":[3]
                },
                {
                    "min":4,
                    "max":5,
                    "vals":[4]
                },
                {
                    "min":5,
                    "max":6,
                    "vals":[5]
                },
                {
                    "min":6,
                    "max":7,
                    "vals":[6]
                },
                {
                    "min":7,
                    "max":8,
                    "vals":[]
                },
                {
                    "min":8,
                    "max":9,
                    "vals":[]
                },
                {
                    "min":9,
                    "max":10,
                    "vals":[]
                },
                {
                    "min":10,
                    "max":11,
                    "vals":[]
                },]});
            });
        })
        context("list:[1,2,3,4,5,6],maxRange:10",function(){
            it("Should group array of 6 sequential elements into 6 buckets with maxRange",function(){
                assert.deepOwnInclude(new Bucketify({"list":[1,2,3,4,5,6],"maxRange":10}),{
                "min":1,
                "max":10,
                "buckets":[{
                    "min":1,
                    "max":2,
                    "vals":[1]
                },
                {
                    "min":2,
                    "max":3,
                    "vals":[2]
                },
                {
                    "min":3,
                    "max":4,
                    "vals":[3]
                },
                {
                    "min":4,
                    "max":5,
                    "vals":[4]
                },
                {
                    "min":5,
                    "max":6,
                    "vals":[5]
                },
                {
                    "min":6,
                    "max":7,
                    "vals":[6]
                },
                {
                    "min":7,
                    "max":8,
                    "vals":[]
                },
                {
                    "min":8,
                    "max":9,
                    "vals":[]
                },
                {
                    "min":9,
                    "max":10,
                    "vals":[]
                },
                {
                    "min":10,
                    "max":11,
                    "vals":[]
                },]});
            });
        })
        context("list:[1,2,5,5,6], maxRange:10, maxBuckets:3",function(){   
            it("Should group array of 5 non-sequential elements into 3 buckets with maxRange",function(){
                assert.deepOwnInclude(new Bucketify({"list":[1,2,5,5,6],"maxRange":10,"maxBuckets":3}),{
                "min":1,
                "max":10,
                "buckets":[{
                    "min":1,
                    "max":5,
                    "vals":[1,2]
                },
                {
                    "min":5,
                    "max":9,
                    "vals":[5,5,6]
                },
                {
                    "min":9,
                    "max":13,
                    "vals":[]
                }]});
            });
        });
        context(`list:[{"i":1},{"i":2},{"i":5},{"i":5},{"i":6}],maxBuckets:3,maxRange:10`,function(){    
            it("Should group array of 5 objects into 3 buckets",function(){
                assert.deepOwnInclude(new Bucketify({"list":[{"i":1},{"i":2},{"i":5},{"i":5},{"i":6}],"maxBuckets":3,
                "getProperty":(a)=>a.i,"maxRange":10}),{
                "min":1,
                "max":10,
                "buckets":[{
                    "min":1,
                    "max":5,
                    "vals":[{"i":1},{"i":2}]
                },
                {
                    "min":5,
                    "max":9,
                    "vals":[{"i":5},{"i":5},{"i":6}]
                },
                {
                    "min":9,
                    "max":13,
                    "vals":[]
                }]});
            });
        })
        context("list:[1,2,3,4,5,6],bucketSize:2",function(){
            it("Should group array of 6 sequential elements into 3 buckets of size 2",function(){
                assert.deepOwnInclude(new Bucketify({"list":[1,2,3,4,5,6],"bucketSize":2}),{
                "min":1,
                "max":6,
                "buckets":[{
                    "min":1,
                    "max":3,
                    "vals":[1,2]
                },
                {
                    "min":3,
                    "max":5,
                    "vals":[3,4]
                },
                {
                    "min":5,
                    "max":7,
                    "vals":[5,6]
                }]});
            });
        });
        context("list:[1,2,3,4,5,6],bucketSize:2,minRange:0",function(){
            it("Should group array of 6 sequential elements into 4 buckets of size 2",function(){
                assert.deepOwnInclude(new Bucketify({"list":[1,2,3,4,5,6],"bucketSize":2,"minRange":0}),{
                "min":0,
                "max":6,
                "buckets":[{
                    "min":0,
                    "max":2,
                    "vals":[1]
                },
                {
                    "min":2,
                    "max":4,
                    "vals":[2,3]
                },
                {
                    "min":4,
                    "max":6,
                    "vals":[4,5]
                },
                {
                    "min":6,
                    "max":8,
                    "vals":[6]
                }]});
            });
        });
    })
})